name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        check-latest: true

    - name: Go Format
      run: gofmt -s -w . && git diff --exit-code

    - name: Go Vet
      run: go vet ./...

    - name: Go Tidy
      run: go mod tidy && git diff --exit-code

    - name: Go Mod Download
      run: go mod download

    - name: Go Mod Verify
      run: go mod verify

    - name: Go Generate
      run: go generate ./... && git diff --exit-code

    - name: Go Build
      run: go build -v ./...

    - name: Go Compile Tests
      run: go test -c ./...

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # Run against multiple Terraform CLI versions.
        terraform:
          - '1.0.*'
          - '1.1.*'
          - '1.2.*'
          - '1.3.*'
          - '1.4.*'
          - '1.5.*'
          - '1.6.*'
          - '1.7.*'
          - '1.8.*'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        check-latest: true

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.terraform }}
        terraform_wrapper: false

    - name: Go Mod Download
      run: go mod download

    - name: Run Unit Tests
      run: go test -v -cover ./...

    - name: Run Race Tests
      run: go test -v -race -cover ./...

  acceptance:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        check-latest: true

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.8.*'
        terraform_wrapper: false

    - name: Go Mod Download
      run: go mod download

    - name: Setup Test HTTP Server
      run: |
        # Start a simple HTTP server for acceptance tests
        python3 -m http.server 8080 &
        echo "HTTP_SERVER_PID=$!" >> $GITHUB_ENV
        sleep 2

    - name: Run Acceptance Tests
      env:
        TF_ACC: 1
        TEST_SERVER_URL: http://localhost:8080
      run: go test -v -cover ./... -timeout 30m

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$HTTP_SERVER_PID" ]; then
          kill $HTTP_SERVER_PID || true
        fi