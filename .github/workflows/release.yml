name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      config_file: ${{ steps.config.outputs.config_file }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta1"
            exit 1
          fi

      - name: Run tests
        run: go test -v ./...

      - name: Run linting
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Run security scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Validate GoReleaser config
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: check --config .goreleaser.v2.yml

  # Main release job
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Select GoReleaser config
        id: config
        run: |
          if [ -z "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "config_file=.goreleaser.unsigned.yml" >> $GITHUB_OUTPUT
            echo "Using unsigned release config"
          else
            echo "config_file=.goreleaser.v2.yml" >> $GITHUB_OUTPUT  
            echo "Using signed release config"
          fi
          
      - name: Set config environment variable
        run: |
          echo "GORELEASER_CONFIG=${{ steps.config.outputs.config_file }}" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > /tmp/CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" >> /tmp/CHANGELOG.md
          else
            echo "## Initial Release" > /tmp/CHANGELOG.md
            echo "- First release of terraform-provider-rest" >> /tmp/CHANGELOG.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Select release config
        id: release_config
        run: |
          if [ -z "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "config_file=.goreleaser.unsigned.yml" >> $GITHUB_OUTPUT
            echo "Using unsigned release config"
          else
            echo "config_file=.goreleaser.v2.yml" >> $GITHUB_OUTPUT  
            echo "Using signed release config"
          fi

      - name: Run GoReleaser (Dry Run)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean --config ${{ steps.release_config.outputs.config_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Run GoReleaser (Release)
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --config ${{ steps.release_config.outputs.config_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Upload release artifacts
        if: github.event.inputs.dry_run != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*_checksums.txt
            dist/*_manifest.json
          retention-days: 30

  # Post-release tasks
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate, goreleaser]
    if: github.event.inputs.dry_run != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Update documentation
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Released version $VERSION" >> RELEASE_NOTES.md
          echo "Please update Terraform Registry if this is a public release."

      - name: Notify teams
        run: |
          echo "🚀 New release published: ${{ needs.validate.outputs.version }}"
          echo "📦 Artifacts are available in the GitHub release"
          echo "📖 Documentation has been updated"
          echo "🔐 All artifacts are signed with GPG"

      - name: Create deployment issue
        if: contains(github.ref, 'v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate.outputs.version }}';
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deploy ${version} to Terraform Registry`,
              body: `
            ## Release Deployment
            
            Version \`${version}\` has been successfully released.
            
            ### Next Steps:
            - [ ] Verify release artifacts in GitHub Releases
            - [ ] Update Terraform Registry listing (if applicable)
            - [ ] Test provider download and installation
            - [ ] Update internal documentation
            - [ ] Announce release to users
            
            ### Release Information:
            - **Version**: ${version}
            - **Release URL**: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}
            - **Artifacts**: Signed binaries for multiple platforms
            - **Documentation**: Updated with latest features
            
            /cc @maintainers
              `,
              labels: ['release', 'deployment']
            });
            console.log('Created deployment issue:', issue.data.html_url);